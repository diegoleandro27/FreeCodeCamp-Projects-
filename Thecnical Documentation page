<nav id="navbar">
  <header> C++ DOCUMENTATION </header> 
<ul>
  <li><a class="nav-link"
         href="#Introduction">Introduction </a></li>



  <li><a class="nav-link"
         href="#C++_Get_started">C++ Get started</a></li>


  <li><a class="nav-link"
         href="#C++_Syntax">C++ Syntax</a></li>
 


  <li><a class="nav-link"
         href="#C++_Output">C++ Output</a></li>
 


  <li><a class="nav-link"
         href="#C++_Comments">C++ Comments</a></li>
 


  <li><a class="nav-link"
         href="#C++_Variables">C++ Variables</a></li>



  <li><a class="nav-link"
         href="#C++_input">C++ Input</a></li>

  <li><a class="nav-link"
         href="#C++_Data_Types">C++ Data Types</a></li>
  
  <li><a class="nav-link" href="#Reference">Reference</a></li>
  
  </ul>  
</nav>







<main id="main-doc">
  <section class="main-section"
           id="Introduction"> 
    
    <header>Introduction</header>
    
    <h3> What is C++? </h3>
    <p> C++ is a cross-platform language that can be used to create high-performance applications.

C++ was developed by Bjarne Stroustrup, as an extension to the C language.

C++ gives programmers a high level of control over system resources and memory.

The language was updated 3 major times in 2011, 2014, and 2017 to C++11, C++14, and C++17.
    </p>
    
    <h3> Why Use C++</h3>  
    
    <p>
      C++ is one of the world's most popular programming languages.

C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.

C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.

C++ is portable and can be used to develop applications that can be adapted to multiple platforms.

C++ is fun and easy to learn!

As C++ is close to C# and Java, it makes it easy for programmers to switch to C++ or vice versa
    </p>
    
  </section>
  
  <section class="main-section" 
           id="C++_Get_started">
    
    <header>C++ Get started</header>
    <articule> 
      
    <p>
To start using C++, you need two things:
    </p>
    
    <ul> <li>A text editor, like Notepad, to write C++ code </li>
<li>A compiler, like GCC, to translate the C++ code into a language that the computer will understand.</li>
      </ul>    
    
There are many text editors and compilers to choose from.
    </p>
  </article>
  </section> 
 
  <section class="main-section"
           id="C++_Syntax"> 
    
    <header>C++ Syntax</header>
    <p>
      Let's break up the following code to understand it better: 
    </p>
      <code> 
        #include iostream
using namespace std;

int main() {
  cout << "Hello World!";
  return 0;
}
       </code> 
    <h3> Example explained </h3>
    
    <ul>
      <li><strong>Line 1:</strong> #include iostream is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs.</li>

      <li><strong>Line 2:</strong> using namespace std means that we can use names for objects and variables from the standard library.</li>
    </ul>
    
    <code> Don't worry if you don't understand how #include <iostream> and using namespace std works. Just think of it as something that (almost) always appears in your program.</code>
      
      <ul>
        <li><strong>Line 3:</strong> A blank line. C++ ignores white space. But we use it to make the code more readable.</li>

<li><strong>Line 4:</strong>Another thing that always appear in a C++ program, is int main(). This is called a function. Any code inside its curly brackets {} will be executed.</li> 

        <li><strong>Line 5:</strong>  cout (pronounced "see-out") is an object used together with the insertion operator (<<) to output/print text. In our example it will output "Hello World".</li>
        </ul>

        <p> Note: Every C++ statement ends with a semicolon ;. </p>

<p>Note: The body of int main() could also been written as:</p>
      
      <p>Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.</p>
      
        <ul>
<code>int main () { cout << "Hello World! "; return 0; }</code>

          <li><strong>Line 6:</strong> return 0 ends the main function.</li>

<li><strong>Line 7:</strong> Do not forget to add the closing curly bracket } to actually end the main function.</li> 
      </ul>
      
  </section> 
  
  <section class="main-section" 
           id="C++_Output">
    
    <header >C++ Output</header> 
    <p>The cout object, together with the << operator, is used to output values/print text: </p>
    
    <code> 
      #include <iostream>
using namespace std;

int main() {
  cout << "Hello World!";
  return 0;
}
    </code> 
     <p> You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:</p>
      
      <code> 
        #include <iostream>
using namespace std;

int main() {
  cout << "Hello World!";
  cout << "I am learning C++";
  return 0;
}
      </code>
        
       
  </section>
  
  <section class="main-section"
           id="C++_Comments">
    
    <header>C++ Comments</header>
    <p>
      Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Comments can be singled-lined or multi-lined.
    </p>
    <h3>Single-line Comments</h3>
    <p>
      Single-line comments start with two forward slashes (//).

Any text between // and the end of the line is ignored by the compiler (will not be executed).

This example uses a single-line comment before a line of code: </p> 
    
    <code>// This is a comment
      cout << "Hello World!";</code> 
    
    <p> This example uses a single-line comment at the end of a line of code:</p>
    
    <code> cout << "Hello World!"; // This is a comment </code>
    
    <h3>C++ Multi-line Comments</h3>
    
    <p> Multi-line comments start with /* and ends with */.

Any text between /* and */ will be ignored by the compiler:
    </p>
    
    <code>
      /* The code below will print the words Hello World!
to the screen, and it is amazing */
cout << "Hello World!"
    </code>
    
  </section> 
  
  <section class="main-section" 
           id="C++_Variables">
    
    <header>C++ Variables</header> 
    <p>Variables are containers for storing data values.

In C++, there are different types of variables (defined with different keywords), for example:
      </p>
<ul>
  <li><strong>int</strong> - stores integers (whole numbers), without decimals, such as 123 or -123. </li>
  <li> <strong> double</strong> - stores floating point numbers, with decimals, such as 19.99 or -19.99. </li>
<li> <strong> char </strong> - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes.</li>
<li> <strong> string </strong>  - stores text, such as "Hello World". String values are surrounded by double quotes. </li> 
  <li><strong>bool</strong> - stores values with two states: true or false. </li> 
    </ul> 
    <h3>Declaring (Creating) Variables</h3>
    <p> To create a variable, specify the type and assign it a value:</p> 
    
    <code> type variableName = value; </code> 
    
    <p>
      Where type is one of C++ types (such as int), and variableName is the name of the variable (such as x or myName). The equal sign is used to assign values to the variable.

To create a variable that should store a number, look at the following example:
    </p>
    
    <p> <strong> Create a variable called myNum of type int and assign it the value 15:</strong> </p>
    <code>
int myNum = 15;
cout << myNum;
    </code> 
  </section> 
 
   <section class="main-section" 
            id="C++_input">
     
    <header>C++ input</header>  
     <p>
       You have already learned that cout is used to output (print) values. Now we will use cin to get user input.

cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).

In the following example, the user can input a number, which is stored in the variable x. Then we print the value of x:
     </p>
     <code>
       int x; 
cout << "Type a number: "; // Type a number and press enter
cin >> x; // Get user input from the keyboard
cout << "Your number is: " << x; // Display the input value
     </code>
     
     <h3> Creating a Simple Calculator</h3> 
     <p>
       In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:
     </p>
     <code>
       int x, y;
int sum;
cout << "Type a number: ";
cin >> x;
cout << "Type another number: ";
cin >> y;
sum = x + y;
cout << "Sum is: " << sum;
     </code> 
     
     <code id="extra_info"> Good To Know
cout is pronounced "see-out". Used for output, and uses the insertion operator (<<)

cin is pronounced "see-in". Used for input, and uses the extraction operator (>>)
     </code> 
  </section>
  
    <section class="main-section" 
             id="C++_Data_Types">
      
    <header>C++ Data Types</header> 
      <p>
        As explained in the Variables chapter, a variable in C++ must be a specified data type:
      </p>
      <code>
        int myNum = 5;               // Integer (whole number)
float myFloatNum = 5.99;     // Floating point number
double myDoubleNum = 9.98;   // Floating point number
char myLetter = 'D';         // Character
bool myBoolean = true;       // Boolean
string myText = "Hello";     // String
      </code>
      <h3> Basic Data Types </h3>
      <p>The data type specifies the size and type of information the variable will store:</p>
      
      <table>
        <tr>
          <th> Data Type</th> 
          <th> Size </th>
          <th> Description </th> 
        </tr>
    
        <tr>
        <td> int </td>
        <td> 4 bytes </td>
        <td> Stores whole numbers, without decimals </td>
        </tr> 
        
        <tr>
          <td> float</td>
          <td> 4 bytes </td>
          <td> Stores fractional numbers, containing one or more decimals. Sufficient for storing 7 decimal digits</td>
          
        </tr>
        <tr>
          <td> double</td>
          <td> 8 bytes </td>
          <td>	Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits </td>
        </tr>
        
         </tr>
        <tr>
          <td> boolean</td>
          <td> 1 bytes </td>
          <td> Stores true or false values </td>
        </tr>
        
        </tr>
        <tr>
          <td> Char</td>
          <td> 1 bytes </td>
          <td> 	Stores a single character/letter/number, or ASCII values </td>
        </tr>
      </table>
  </section>
    <section class="main-section" id="Reference">
    <header>Reference</header>
      <ul>
        <li>
          All the documentation in this page is taken from
          <a
            href="https://www.w3schools.com/cpp/default.asp"
            target="_blank"
            >w3schools</a>
        </li>
        </section> 
</main> 

